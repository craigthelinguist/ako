(def not
  (lambda (x)
    (cond
      ((x) (nil))
      ((true) (true))
    )
  )
)

(def sgn
  (lambda (x)
    (cond
      ((> x 0) 1)
      ((< x 0) -1)
      ((true) 0)
    )
  )
)

(def abs
  (lambda (x)
    (cond
      ((>= x 0) x)
      ((true) (mul -1 x))
    )
  )
)

(def exp
  (lambda (x y)
    (cond
      ((< y 0) (div 1 (exp x (abs y))))
      ((= y 0) 1)
      ((true) (mul x (exp x (pred y))))
    )
  )
)

(def if
  (lambda (x y z)
    (cond
      (x y)
      ((not x) z)
    )
  )
)

(def monus
  (lambda (x y)
    (if (> y x) 0 (- x y))
  )
)

(def min
  (lambda (x y)
    (if (> x y) y x)
  )
)

(def max
  (lambda (x y)
    (if (> x y) x y)
  )
)
